'''
Created on Oct 30, 2015

@author: michael
'''

from flask import Flask, url_for, request, redirect, g
from werkzeug.utils import secure_filename
import pickle
import os
from strace_analyzer import Strace_Analyzer
import tempfile
import sqlite3
import shlex
import subprocess
import requests
import json

#Config:
REPORT_TABLE_OBJ_FILENAME = 'reports_table.pkl'
ALLOWED_EXTENSIONS = set(['jar'])
DATABASE = '../Minecraft_Service_Private/mod_reports.db'
CUCKOO_DIR = '../cuckoo'
CUCKOO_API = 'http://localhost:8090'

app = Flask(__name__)
reports_table = dict()
def setup_app():
    #TODO: instead, populate this dict using the database
    if os.path.exists(REPORT_TABLE_OBJ_FILENAME):
        reports_table = pickle.load(REPORT_TABLE_OBJ_FILENAME)

setup_app()
app.config['REPORT_TABLE_OBJ_FILENAME'] = REPORT_TABLE_OBJ_FILENAME
app.config['ALLOWED_EXTENSIONS'] = ALLOWED_EXTENSIONS

def connect_to_database():
    #TODO: make the database connection more secure maybe? All the data 
    #in the database will be public anyway, but maybe?
    db = sqlite3.connect(DATABASE)
    db.execute('CREATE table if not exists AnalyisFiles ()')
    return 

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = connect_to_database()
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1] in ALLOWED_EXTENSIONS

@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    #TODO: need to be able to choose the minecraft version here - will also
    #need to add version support to the analysis modules
    if request.method == 'POST':
        print 'received file'
        file = request.files['file']
        if file and allowed_file(file.filename):
            print 'allowed file'
            filename = secure_filename(file.filename)
            tempfolder = tempfile.mkdtemp()
            file.save(os.path.join(tempfolder, filename))
            filepath = tempfolder + "/" + filename
            process_file(filename, filepath)
            return redirect(url_for('printReport',
                                    analysisKey=filename))
        else:
            return "Illegal file type"
    return '''
    <!doctype html>
    <title>Upload new File</title>
    <h1>Upload new File</h1>
    <form action="" method=post enctype=multipart/form-data>
      <p><input type=file name=file>
         <input type=submit value=Upload>
    </form>
    '''

def updateTableEntry(analysisKey, report):
    print 'updating entry'
    if analysisKey in reports_table:
        print 'not in table'
        reports_table[analysisKey].append(report)
        print 'added to table'
    else:
        reports_table[analysisKey] = list([report])
#     pickle.dump(reports_table, app.config['REPORT_TABLE_OBJ_FILENAME'])
 
def process_file(filename, filepath):
    #TODO: assume that cuckoo is already running. In future, maybe launch with the server
    #TODO: support for different cuckoo VMs/OSes
#     processor_modules = ['Strace_Analyzer()']
#     print 'processing'
#     for analyzer_str in processor_modules:
#         analyzer = eval(analyzer_str)
#         print 'evalled'
#         output = analyzer.run_analyzer(filepath)
#         print 'eval finished'
#         updateTableEntry(filename, output)
    cuckoo_modules = ['classloader']
    #here are a list of classes that process the results of the cuckoo execution
    #each class implements a 'process' function that takes the result number and cuckoo
    #dir as arguments and return an AnalysisOutput object for storage
    cuckoo_postprocessors = ['Classloader_Processor()']
    SUBMISSION_PATH = '/tasks/create/file'
    for cuckoo_module in cuckoo_modules:
#         cuckoo_call_tokens = [CUCKOO_DIR+'/utils/submit.py', '--package', cuckoo_module, filepath]
#         cuckoo_call_str = " ".join(cuckoo_call_tokens)
#         cuckoo_shell_args = shlex.split(cuckoo_call_str)
#         #this submits to the running cuckoo instance if there is one
#         subprocess.call(cuckoo_shell_args)
        #Instead, use the REST API. assumes the cuckoo REST server is running
        with open(filepath, 'rb') as sample:
            multipart_file = {"file:": (filename, sample)}
            request = requests.post(CUCKOO_API+SUBMISSION_PATH, files=multipart_file, package=cuckoo_module)
            
        json_decoder = json.JSONDecoder()
        task_id = json_decoder.decode(request.text)["task_id"]
        updateTableEntry(filename, None)
        
 
@app.route('/')
def hello_world():
    message = 'Hello! Please upload a minecraft jar here:'
    message += "<br /><a href=\"" + str(url_for('upload_file')) +"\">Upload file</a>"
    message += '<br />Please note that we only support modes for Minecraft version 1.8.7. More version support to come.'
    return message

@app.route('/reports/<analysisKey>')
def printReport(analysisKey):
    if analysisKey in reports_table:
        reportList = reports_table[analysisKey]
        if reportList is None:
            return "Analysis not completed"
        sorted_reports = sorted(reportList, key=lambda x: x.analysisString)
        message = ""
        for report in sorted_reports:
            message += str(report.analysisString)
            message += "\n"
            message += str(report.messageList)
        return message
    else:
        return "Report does not exist"
    

@app.route('/reports')
def reports():
    message = 'Reports:'
    for report_key in reports_table:
        if reports_table[report_key] is None:
            message += '<br />Analysis not complete'
        else:
            message += "<br />" + str(url_for(printReport, report=report_key))
    return message
        
    

if __name__ == '__main__':
    app.run(debug=True)