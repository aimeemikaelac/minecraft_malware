#!/usr/bin/python
'''
Created on Oct 7, 2015

@author: michael
'''

from strace_parser import *
from util import *
import argparse
import os.path
import sys
import subprocess
import time
import hashlib
from AnalysisOutput import AnalysisOutput

class Strace_Analyzer:
    def __init__(self):
        self.STRACE_ARGS = ['-f', '-T', '-ttt', '-o']
        self.encountered_system_calls = []
        self.suspect_system_calls = []
        self.scanner_location = "/home/michael/minecraft/scanner.jar"
    
    def get_strace_outfile_name(self, modFileName):
        timestamp = time.strftime("%Y%m%d-%H%M%S")
        fileNameTrunc = modFileName[:75]
        filenameHash = getFileNameHash(modFileName)
        storageName = fileNameTrunc+"_"+filenameHash+"_"+timestamp+".out"
        return storageName, filenameHash
    
    def run_strace(self, modFileName):
        callArgs = []
        callArgs.append("/usr/bin/strace")
        callArgs.extend(self.STRACE_ARGS)
        path, basefile = os.path.split(modFileName)#"/home/michael/.minecraft/mods/test-1.0.jar")
        straceOutputFile, filenameHash = self.get_strace_outfile_name(basefile)
        callArgs.append(straceOutputFile)
        callArgs.extend(["java", "-jar",self.scanner_location, "-i", modFileName ])
        joinedArgs = " ".join(callArgs)
        
        print "arguments: "+joinedArgs
        returnCode = subprocess.call(joinedArgs, shell=True)
        if returnCode != 0:
            print "error encountered when running strace"
            sys.exit(returnCode)
        print "Finished Call----------------------------------------------"
        self.encountered_system_calls, self.suspect_system_calls = parseFile(straceOutputFile)
        
    def run_analyzer(self, modFileName):
        self.run_strace(modFileName)
        print "finished run strace"
        message = "Encountered system calls: <br />"
        for call in self.encountered_system_calls:
            message += str(call) + " "
        message += "<br /> <br />Suspect system call info:"
        for call_info in self.suspect_system_calls:
            line = "<br />"
            for info_element in call_info:
                line += str(info_element) + " "
            message += line
        print 'returning output'
        return AnalysisOutput(message, "Strace Analysis")
        
    def printEncounteredCalls(self):
        print "Encountered system calls:"
        for call in self.encountered_system_calls:
            print call 
            
    def printSuspectCalls(self):
        print "Suspect system calls:"
        for call in self.suspect_system_calls:
            print call
        
    
    def main(self, argv):
        parser = argparse.ArgumentParser()
        parser.add_argument("--file", required=True, help="File path of mod file to check")
        args = parser.parse_args()
    
        print args.file
        print os.path.isfile(args.file)
        if os.path.isfile(args.file) != True:
            print "The provided file path is not a valid file"
            sys.exit(-1)
            
        if os.access(args.file, os.R_OK) != True:
            print "File is not accessible for reading"
            sys.exit(-1)
        
        self.run_analyzer(args.file)
    

if __name__ == "__main__":
    analyzer = Strace_Analyzer()
    analyzer.main(sys.argv)
#     print "Encountered calls:"
#     analyzer.printEncounteredCalls()
