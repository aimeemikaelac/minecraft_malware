'''
Created on Feb 14, 2016

@author: michael
'''

import threading

class AtomicCounter(object):
    '''
    Atomic counter that supports +=, -=, get() and set() 
    '''


    def __init__(self, val=0):
        '''
        Constructor
        '''
        self.lock = threading.Lock()
        self.val = val
        
#     def __iadd__(self, other):
#         self.lock.acquire()
#         self.val += other
#         self.lock.release()
#         
#     def __isub__(self, other):
#         self.lock.acquire()
#         self.val -= other
#         self.lock.release()
    def add(self, other):
        self.lock.acquire()
        self.val += other
        self.lock.release()
        
    def sub(self, other):
        self.lock.acquire()
        self.val -= other
        self.lock.release()
        
    def decrement(self):
        self.sub(1)
        
    def increment(self):
        self.add(1)
        
    def get(self):
        self.lock.acquire()
        out = self.val
        self.lock.release()
        return out
    
    def set(self, val):
        self.lock.acquire()
        self.val = val
        self.lock.release()